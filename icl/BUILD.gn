import("//testing/test.gni")

group("tests") {
  testonly = true
  deps = [
    # icl:
#FIXME needs a lot of work
#    ":parse_tree_test",
    ":tokenizer_test",
#FIXME needs a lot of work
#    ":scope_test",
    ":value_test",

    # string_number_conversions:
    ":string_number_conversions_test",

    # string_piece:
    ":string_piece_test",
  ]
}

# icl --------------------------------------------------------------------------

source_set("icl") {
  sources = [
    "err.cc",
    "err.h",
    "input_file.cc",
    "input_file.h",
    "location.cc",
    "location.h",
#FIXME needs a lot of work
#    "parse_tree.cc",
    "parse_tree.h",
    "scope.cc",
    "scope.h",
    "standard_out.cc",
    "standard_out.h",
    "token.cc",
    "token.h",
    "tokenizer.cc",
    "tokenizer.h",
    "value.cc",
    "value.h",
  ]

  deps = [
    ":string_number_conversions",
  ]

  public_deps = [
    ":string_piece",
  ]
}

#test("parse_tree_test") {
#  sources = [
#    "parse_tree_unittest.cc",
#  ]
#
#  deps = [
#    ":icl",
#  ]
#}

#test("scope_test") {
#  sources = [
#    "scope_unittest.cc",
#  ]
#
#  deps = [
#    ":icl",
#  ]
#}

test("tokenizer_test") {
  sources = [
    "tokenizer_unittest.cc",
  ]

  deps = [
    ":icl",
  ]
}

test("value_test") {
  sources = [
    "value_unittest.cc",
  ]

  deps = [
    ":icl",
  ]
}

# string_number_conversions ----------------------------------------------------

source_set("string_number_conversions") {
  sources = [
    "string_number_conversions.cc",
    "string_number_conversions.h",
  ]
}

test("string_number_conversions_test") {
  sources = [
    "string_number_conversions_unittest.cc",
  ]

  deps = [
    ":string_number_conversions",
  ]
}

# string_piece -----------------------------------------------------------------

source_set("string_piece") {
  sources = [
    "string_piece.cc",
    "string_piece.h",
  ]
}

test("string_piece_test") {
  sources = [
    "string_piece_unittest.cc",
  ]

  deps = [
    ":string_piece",
  ]
}
